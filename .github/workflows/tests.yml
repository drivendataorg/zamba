name: tests

on:
  push:
    branches: [master]
    paths:
      - "zamba/**"
      - "pyproject.toml"
      - ".github/workflows/tests.yml"
  pull_request:
    branches:
      - master
    paths:
      - "zamba/**"
      - "pyproject.toml"
      - ".github/workflows/tests.yml"
  schedule:
    # Run every Sunday
    - cron: '0 0 * * 0'
  workflow_dispatch:
    inputs:
      chosen-os:
        description: 'OS to run on'
        required: true
        type: choice
        default: ubuntu-latest
        options:
        - ubuntu-latest
        - macos-latest

env:
  MODEL_CACHE_DIR: ${{ github.workspace }}/.zamba-weights

jobs:
  code-quality:
    name: Code Quality
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: astral-sh/setup-uv@v5
        with:
          enable-cache: true
          cache-suffix: "lint"
          cache-dependency-glob: |
            requirements-dev/lint.txt

      - name: Install dependencies
        run: |
          uv pip install -r requirements-dev/lint.txt

      - name: Lint package
        run: |
          make lint


  set-up-os-matrix:
    name: "Set up OS matrix"
    needs: code-quality
    runs-on: ubuntu-latest
    outputs:
      os_matrix: ${{ steps.step.outputs.os_matrix }}
    steps:
      - name: Set up OS matrix
        id: step
        run: |
          if [[ ${{ github.event_name }} = 'schedule' ]]; then
            MATRIX='["ubuntu-latest", "macos-latest"]'
          elif [[ ${{ github.event_name }} = 'workflow_dispatch' ]]; then
            MATRIX='["${{ inputs.chosen-os }}"]'
          else
            MATRIX='["ubuntu-latest"]'
          fi
          echo "$MATRIX"
          echo "os_matrix=$MATRIX" >> "$GITHUB_OUTPUT"


  cache-model-weights:
    name: Download or use cached model weights
    needs: set-up-os-matrix
    strategy:
      matrix:
        os: ${{ fromJson(needs.set-up-os-matrix.outputs.os_matrix) }}
    runs-on: ${{ matrix.os }}

    steps:
    - uses: actions/checkout@v4

    - uses: astral-sh/setup-uv@v5
      with:
        python-version: 3.11
        enable-cache: true
        cache-suffix: "cache-weights"
        cache-dependency-glob: |
          pyproject.toml

    - name: Install dependencies
      run: |
        uv pip install -e .[tests]

    - name: Load weights cache
      id: cache-weights
      uses: actions/cache@v4
      with:
        path: "${{ env.MODEL_CACHE_DIR }}"
        key: weights-${{ hashFiles('zamba/models/official_models/**/config.yaml', 'zamba/models/densepose/densepose_manager.py') }}

    - name: Populate weights cache
      run: zamba utils dl-weights

  tests:
    name: Test suite (${{ matrix.os }}, Python ${{ matrix.python-version }})
    needs: [set-up-os-matrix, cache-model-weights]
    env:
      DISTUTILS_USE_SDK: 1 # for MSVC compiler
    strategy:
      matrix:
        os: ${{ fromJson(needs.set-up-os-matrix.outputs.os_matrix) }}
        python-version: [3.9, 3.10]
    runs-on: ${{ matrix.os }}

    steps:
      - if: matrix.os == 'ubuntu-latest'
        name: Remove unused software
        run: |
          echo "Available storage before:"
          sudo df -h
          echo
          sudo rm -rf /usr/share/dotnet
          sudo rm -rf /usr/local/lib/android
          sudo rm -rf /opt/ghc
          sudo rm -rf /opt/hostedtoolcache/CodeQL
          echo "Available storage after:"
          sudo df -h
          echo

      - uses: actions/checkout@v4

      - name: Load weights cache
        id: cache-weights
        uses: actions/cache@v4
        with:
          path: "${{ env.MODEL_CACHE_DIR }}"
          key: weights-${{ hashFiles('zamba/models/official_models/**/config.yaml', 'zamba/models/densepose/densepose_manager.py') }}

      - if: matrix.os == 'ubuntu-latest'
        name: Setup FFmpeg
        uses: Iamshankhadeep/setup-ffmpeg@v1.1  # does not support arm64
        with:
          # Not strictly necessary, but it may prevent rate limit
          # errors especially on GitHub-hosted macos machines.
          token: ${{ secrets.GITHUB_TOKEN }}
          version: "4.4"

      - if: matrix.os == 'macos-latest'
        name: Setup FFmpeg
        run: |
          brew install ffmpeg@4
          echo "/opt/homebrew/opt/ffmpeg@4/bin" >> "$GITHUB_PATH"

      - name: Configure Windows compilers
        uses: ilammy/msvc-dev-cmd@v1

      - uses: astral-sh/setup-uv@v5
        with:
          python-version: ${{ matrix.python-version }}
          enable-cache: true
          cache-suffix: "tests-${{ matrix.python-version }}"
          cache-dependency-glob: |
            pyproject.toml

      - name: Install dependencies
        run: |
          uv pip install -e .[tests]

      - name: Run tests
        run: |
          make tests

      - if: matrix.os == 'macos-latest'
        name: Specify MacOS version for densepose install
        run: |
          echo "MACOSX_DEPLOYMENT_TARGET=$(sw_vers -productVersion)" >> $GITHUB_ENV

      - name: Run densepose tests
        env:
          ZAMBA_RUN_DENSEPOSE_TESTS: 1
        run: |
          uv pip install flit-core
          # torch is already installed, so just add the densepose extra
          uv pip install -e .[densepose] --no-build-isolation
          make densepose-tests

      - name: Upload coverage to codecov
        uses: codecov/codecov-action@v4
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          file: ./coverage.xml
          fail_ci_if_error: ${{ (github.event_name == 'push' && true) || (github.event_name == 'pull_request' && true) || false }}

  test-install:
    name: Test install from built distributions
    needs: tests
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest]
        python-version: [3.11, 3.12]

    steps:
      - name: Remove unused software
        run: |
          echo "Available storage before:"
          sudo df -h
          echo
          sudo rm -rf /usr/share/dotnet
          sudo rm -rf /usr/local/lib/android
          sudo rm -rf /opt/ghc
          sudo rm -rf /opt/hostedtoolcache/CodeQL
          echo "Available storage after:"
          sudo df -h
          echo

      - uses: actions/checkout@v2

      - name: Setup FFmpeg
        uses: Iamshankhadeep/setup-ffmpeg@v1.2
        with:
          # Not strictly necessary, but it may prevent rate limit
          # errors especially on GitHub-hosted macos machines.
          token: ${{ secrets.GITHUB_TOKEN }}
          version: "4.4"

      - uses: astral-sh/setup-uv@v5
        with:
          python-version: ${{ matrix.python-version }}
          enable-cache: true
          cache-suffix: "test-install-${{ matrix.python-version }}"
          cache-dependency-glob: |
            pyproject.toml

      - name: Build package
        run: |
          uv pip install build
          make dist

      - name: Install wheel; test CLI + models with assets
        run: |
          uv venv .venv-whl
          PYTHON_BIN=.venv-whl/bin/python
          uv pip install --python=$PYTHON_BIN zamba@$(find dist -name 'zamba*.whl') --force-reinstall
          $PYTHON_BIN -m zamba --help
          $PYTHON_BIN -c "from zamba.data.video import MegadetectorLiteYoloX; MegadetectorLiteYoloX()"

      - name: Install source; test CLI + models with assets
        run: |
          uv venv .venv-sdist
          PYTHON_BIN=.venv-sdist/bin/python
          uv pip install --python=$PYTHON_BIN zamba@$(find dist -name 'zamba*.tar.gz') --force-reinstall
          $PYTHON_BIN -m zamba --help
          $PYTHON_BIN -c "from zamba.data.video import MegadetectorLiteYoloX; MegadetectorLiteYoloX()"

  notify:
    name: Notify failed build
    needs: [code-quality, set-up-os-matrix, tests, test-install]
    if: failure() && (github.event_name == 'push' || github.event_name == 'schedule')
    runs-on: ubuntu-latest
    steps:
      - uses: jayqi/failed-build-issue-action@v1
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
